
//1
#include <stdio.h>

int main()
{
    int a[3][3], b[3][3], sum[3][3];

    printf("Enter the values for matrix A:\n");
    for (int i = 0; i < 3; i++)
    {
        for (int j = 0; j < 3; j++)
        {
            scanf("%d", &a[i][j]);
        }
    }

    printf("Enter the values for matrix B:\n");
    for (int i = 0; i < 3; i++)
    {
        for (int j = 0; j < 3; j++)
        {
            scanf("%d", &b[i][j]);
        }
    }

    for (int i = 0; i < 3; i++)
    {
        for (int j = 0; j < 3; j++)
        {
            sum[i][j] = a[i][j] + b[i][j];
        }
    }

    printf("The sum of the two matrices is:\n");
    for (int i = 0; i < 3; i++)
    {
        for (int j = 0; j < 3; j++)
        {
            printf("%d ", sum[i][j]);
        }
        printf("\n");
    }

    return 0;
}
//2
#include <stdio.h>

int main()
{
    int a[3][3], b[3][3], product[3][3];

    printf("Enter the values for matrix A:\n");
    for (int i = 0; i < 3; i++)
    {
        for (int j = 0; j < 3; j++)
        {
            scanf("%d", &a[i][j]);
        }
    }

    printf("Enter the values for matrix B:\n");
    for (int i = 0; i < 3; i++)
    {
        for (int j = 0; j < 3; j++)
        {
            scanf("%d", &b[i][j]);
        }
    }

    for (int i = 0; i < 3; i++)
    {
        for (int j = 0; j < 3; j++)
        {
            product[i][j] = 0;
            for (int k = 0; k < 3; k++)
            {
                product[i][j] += a[i][k] * b[k][j];
            }
        }
    }

    printf("The product of the two matrices is:\n");
    for (int i = 0; i < 3; i++)
    {
        for (int j = 0; j < 3; j++)
        {
            printf("%d ", product[i][j]);
        }
        printf("\n");
    }

    return 0;
}
//3
#include <stdio.h>

int main()
{
    int matrix[10][10], transpose[10][10], row, col;

    printf("Enter number of rows and columns of matrix: ");
    scanf("%d %d", &row, &col);

    printf("Enter elements of matrix:\n");
    for (int i = 0; i < row; i++)
    {
        for (int j = 0; j < col; j++)
        {
            scanf("%d", &matrix[i][j]);
        }
    }

    printf("Entered matrix is:\n");
    for (int i = 0; i < row; i++)
    {
        for (int j = 0; j < col; j++)
        {
            printf("%d\t", matrix[i][j]);
        }
        printf("\n");
    }

    for (int i = 0; i < row; i++)
    {
        for (int j = 0; j < col; j++)
        {
            transpose[j][i] = matrix[i][j];
        }
    }

    printf("Transpose of entered matrix is:\n");
    for (int i = 0; i < col; i++)
    {
        for (int j = 0; j < row; j++)
        {
            printf("%d\t", transpose[i][j]);
        }
        printf("\n");
    }

    return 0;
}
//4
#include <stdio.h>

int main()
{
    int matrix[10][10], row, col, sum = 0;

    printf("Enter number of rows and columns of matrix: ");
    scanf("%d %d", &row, &col);

    printf("Enter elements of matrix:\n");
    for (int i = 0; i < row; i++)
    {
        for (int j = 0; j < col; j++)
        {
            scanf("%d", &matrix[i][j]);
        }
    }

    printf("Entered matrix is:\n");
    for (int i = 0; i < row; i++)
    {
        for (int j = 0; j < col; j++)
        {
            printf("%d\t", matrix[i][j]);
        }
        printf("\n");
    }

    for (int i = 0; i < row; i++)
    {
        for (int j = 0; j < col; j++)
        {
            if (i + j == col - 1)
            {
                sum += matrix[i][j];
            }
        }
    }

    printf("Sum of right diagonals of matrix is %d\n", sum);

    return 0;
}
//5
#include <stdio.h>

int main()
{
    int matrix[10][10], row, col, sum = 0;

    printf("Enter number of rows and columns of matrix: ");
    scanf("%d %d", &row, &col);

    printf("Enter elements of matrix:\n");
    for (int i = 0; i < row; i++)
    {
        for (int j = 0; j < col; j++)
        {
            scanf("%d", &matrix[i][j]);
        }
    }

    printf("Entered matrix is:\n");
    for (int i = 0; i < row; i++)
    {
        for (int j = 0; j < col; j++)
        {
            printf("%d\t", matrix[i][j]);
        }
        printf("\n");
    }

    for (int i = 0; i < row; i++)
    {
        for (int j = 0; j < col; j++)
        {
            if (i == j)
            {
                sum += matrix[i][j];
            }
        }
    }

    printf("Sum of left diagonals of matrix is %d\n", sum);

    return 0;
}
//6
#include <stdio.h>

int main()
{
    int rows, cols, i, j, sum;
    int matrix[10][10];

    printf("Enter number of rows and columns: ");
    scanf("%d%d", &rows, &cols);

    printf("Enter the matrix elements:\n");
    for (i = 0; i < rows; i++)
    {
        for (j = 0; j < cols; j++)
        {
            scanf("%d", &matrix[i][j]);
        }
    }

    printf("Matrix:\n");
    for (i = 0; i < rows; i++)
    {
        for (j = 0; j < cols; j++)
        {
            printf("%d ", matrix[i][j]);
        }
        printf("\n");
    }

    for (i = 0; i < rows; i++)
    {
        sum = 0;
        for (j = 0; j < cols; j++)
        {
            sum += matrix[i][j];
        }
        printf("Sum of elements of row %d is %d\n", i + 1, sum);
    }

    for (j = 0; j < cols; j++)
    {
        sum = 0;
        for (i = 0; i < rows; i++)
        {
            sum += matrix[i][j];
        }
        printf("Sum of elements of column %d is %d\n", j + 1, sum);
    }

    return 0;
}
//7
#include <stdio.h>

int main()
{
    int rows, cols, i, j;
    int matrix[10][10];

    printf("Enter number of rows and columns: ");
    scanf("%d%d", &rows, &cols);

    printf("Enter the matrix elements:\n");
    for (i = 0; i < rows; i++)
    {
        for (j = 0; j < cols; j++)
        {
            scanf("%d", &matrix[i][j]);
        }
    }

    printf("Matrix:\n");
    for (i = 0; i < rows; i++)
    {
        for (j = 0; j < cols; j++)
        {
            printf("%d ", matrix[i][j]);
        }
        printf("\n");
    }

    printf("Lower triangular matrix:\n");
    for (i = 0; i < rows; i++)
    {
        for (j = 0; j <= i; j++)
        {
            printf("%d ", matrix[i][j]);
        }
        printf("\n");
    }

    return 0;
}
//8
#include <stdio.h>

#define ROWS 3
#define COLS 3

void printUpperTriangular(int matrix[ROWS][COLS])
{
    for (int i = 0; i < ROWS; i++)
    {
        for (int j = 0; j < COLS; j++)
        {
            if (i <= j)
            {
                printf("%d ", matrix[i][j]);
            }
            else
            {
                printf("0 ");
            }
        }
        printf("\n");
    }
}

int main()
{
    int matrix[ROWS][COLS] = {{1, 2, 3},
                              {4, 5, 6},
                              {7, 8, 9}};

    printf("The upper triangular matrix is:\n");
    printUpperTriangular(matrix);

    return 0;
}
//9
#include <stdio.h>

#define ROWS 3
#define COLS 3

int isSparse(int matrix[ROWS][COLS])
{
    int count = 0;

    for (int i = 0; i < ROWS; i++)
    {
        for (int j = 0; j < COLS; j++)
        {
            if (matrix[i][j] == 0)
            {
                count++;
            }
        }
    }

    if (count > (ROWS * COLS) / 2)
    {
        return 1; 
    }
    else
    {
        return 0; 
    }
}

int main()
{
    int matrix[ROWS][COLS] = {{1, 0, 0},
                              {0, 0, 0},
                              {0, 0, 1}};

    if (isSparse(matrix))
    {
        printf("The matrix is sparse.\n");
    }
    else
    {
        printf("The matrix is not sparse.\n");
    }

    return 0;
}

//10
#include <stdio.h>

#define ROWS 3
#define COLS 3

int findMaxOnesRow(int matrix[ROWS][COLS])
{
    int ma1row = -1; 
    int maxOnesCount = 0;

    for (int i = 0; i < ROWS; i++)
    {
        int onesCount = 0;
        for (int j = 0; j < COLS; j++)
        {
            if (matrix[i][j] == 1)
            {
                onesCount++;
            }
        }

        if (onesCount > maxOnesCount)
        {
            maxOnesCount = onesCount;
            ma1row = i;
        }
    }

    return ma1row;
}

int main()
{
    int matrix[ROWS][COLS] = {{1, 0, 1},
                              {1, 1, 0},
                              {0, 1, 1}};

    int ma1row = findMaxOnesRow(matrix);

    if (ma1row != -1)
    {
        printf("Row %d has the max numbr of 1s.\n", ma1row + 1);
    }
    else
    {
        printf("The matrix has no 1s.\n");
    }

    return 0;
}
